# CI/CD Pipeline for LMS Backend
# Automated testing, building, and deployment

name: LMS Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18.x'
  DOCKER_REGISTRY: 'your-registry.com'
  IMAGE_NAME: 'lms-backend'

jobs:
  # ==========================================
  # CODE QUALITY & TESTING
  # ==========================================
  test:
    name: Run Tests & Code Quality
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: lms_backend_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Linting
        run: npm run lint
        continue-on-error: true

      - name: Wait for Services
        run: |
          echo "Waiting for MySQL..."
          while ! mysqladmin ping -h127.0.0.1 -P3306 -utest_user -ptest_password --silent; do
            sleep 1
          done
          echo "Waiting for Redis..."
          while ! redis-cli -h 127.0.0.1 -p 6379 ping; do
            sleep 1
          done

      - name: Run Database Setup
        run: |
          mysql -h127.0.0.1 -P3306 -utest_user -ptest_password lms_backend_test < database-setup.sql
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: lms_backend_test
          DB_USER: test_user
          DB_PASSWORD: test_password

      - name: Run Unit Tests
        run: npm test
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: lms_backend_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key-for-ci-testing
          JWT_REFRESH_SECRET: test-jwt-refresh-secret-key-for-ci-testing

      - name: Run Test Coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: lms_backend_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key-for-ci-testing
          JWT_REFRESH_SECRET: test-jwt-refresh-secret-key-for-ci-testing

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: lms-backend-coverage

      - name: Run Security Audit
        run: npm audit --audit-level=moderate

      - name: Performance Tests
        run: |
          npm start &
          sleep 10
          npx autocannon http://localhost:3000/health -c 10 -d 10
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: lms_backend_test
          DB_USER: test_user
          DB_PASSWORD: test_password

  # ==========================================
  # DOCKER BUILD & PUSH
  # ==========================================
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==========================================
  # STAGING DEPLOYMENT
  # ==========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Deploy to Staging Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/lms-backend
            docker-compose pull
            docker-compose up -d
            docker system prune -f

      - name: Run Health Check
        run: |
          sleep 30
          curl -f ${{ secrets.STAGING_URL }}/health || exit 1

      - name: Run Smoke Tests
        run: |
          curl -f ${{ secrets.STAGING_URL }}/api-docs.json || exit 1
          echo "Staging deployment successful!"

  # ==========================================
  # PRODUCTION DEPLOYMENT
  # ==========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/lms-backend
            docker-compose pull
            docker-compose up -d --force-recreate
            docker system prune -f

      - name: Run Health Check
        run: |
          sleep 60
          curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1

      - name: Run Production Tests
        run: |
          curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
          echo "Production deployment successful!"

      - name: Notify Team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'LMS Backend has been deployed to production! ðŸš€'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ==========================================
  # SECURITY SCANNING
  # ==========================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'lms-backend'
          path: '.'
          format: 'HTML'

  # ==========================================
  # RELEASE MANAGEMENT
  # ==========================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.event_name == 'release'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Generate Changelog
        id: changelog
        run: |
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update Release Notes
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: `## What's Changed\n\n${{ steps.changelog.outputs.CHANGELOG }}\n\n## Docker Image\n\n\`\`\`bash\ndocker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}\n\`\`\``
            });

      - name: Notify Release
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'New LMS Backend release ${{ github.event.release.tag_name }} is available! ðŸŽ‰'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }} 